Welcome to the Mycelium Network Podcast, a podcast all about early-stage web developers
and the mentors and teachers that help them along the way.
Hey Andy, thanks so much for joining me for the Mycelium Network Podcast.
Well, thanks for having me.
I'm really happy to be able to do this.
Yeah, I'm really glad you agreed to do it because I know I had to convince you a little
bit.
I definitely am an introvert and I don't really like the limelight.
Yeah, no, me too.
And I've said it before, I don't know why I keep putting myself in situations that generally
I shouldn't enjoy.
Maybe I'm trying to force myself out of the situation.
But I do enjoy a good conversation, so I think that's more what it's about.
And so I think what I'm interested in a couple of things, and I sent you some notes, but
I think one of the things with you that is unique from anybody else that I've had a conversation
with so far is you have a really long history in tech.
And I think there's a lot of really interesting things that you can share.
And I'm also curious for us to kind of juxtapose when you started and now where you've kind
of like trying to get back into the world of tech, but in MLDB a different industry
than you were and how things have changed, what's gotten better, what's gotten worse,
what's stayed the same.
So I think before we dive into any specific topic, if you can kind of give us a bit of
a background of who you are, where you are today, and some of the history.
Yeah, well, my childhood was really pretty standard and unremarkable, but I was always
interested in science and mathematics and tinkering with gadgets and electronics and
I mean those things always fascinated me.
So when I got to college, computers hadn't really become an area of study yet.
And I kind of had two college careers.
I went for a couple of years right out of high school and couldn't really decide what
to do.
Nothing really seemed interesting.
I couldn't get excited about any of the subjects.
So I quit and actually worked in a factory for a couple of years driving a forklift.
After about a year of that, I thought, well, I don't really want to be doing this when
I'm 50.
So I thought it's probably a good idea to maybe go back to college and find something
that I could be interested in that would be a little bit more fun career.
So I transferred, got back into college as a junior.
And the way I got into computing is a little bit different.
It wasn't really something that was on my radar, but I was actually majoring in chemistry.
I'd always liked chemistry and school and everything.
So I was majoring in chemistry and there was one quarter that I needed a chemistry class
that wasn't being offered.
And so I needed something to fill out my schedule and went to talk to my advisor.
And I said, I need to have a full load, full schedule, because I don't want to waste any
time.
And he said, well, you might want to take this FORTRAN course.
He said, it'll fit into a Bachelor of Science degree really well.
And I still remember exactly what he said.
He said to me, computers probably aren't going to go away.
And so I thought, well, I still wasn't totally convinced.
So I did go and sign up for the course.
I went to the first day of class.
The professor seemed like a pretty nice guy.
It was a large class, introductory to FORTRAN.
I did not buy the book right away because I wasn't sure I was going to keep the class.
So the first day of class went pretty well.
So after the second day of class, I actually went and bought the book.
I still have the book somewhere.
It's one of the boxes that have followed me around.
And after the third day of class, I went to the administration building, changed my major
to computer science, and the rest is history, as they say.
But when I started doing computer science in college, we were using punch cards instead
of terminals.
So I had to go to the bookstore and buy.
They had vending machines, actually, in the computing center, where you could buy a package
of 100 punch cards for like a dollar or something.
And for my first course, I think I probably got most of them out of the vending machine.
But pretty soon after the second or third course, I thought, well, it'll be just easier
and cheaper to go to the bookstore and start buying them in the big boxes of 1,000 cards
in it, so that's what I did.
And not too long after that, then they did install some terminals and they set up a machine
to do time sharing of the IBM 370, which everything ran on.
So from punch cards to today is just a stark difference.
You can't even imagine what that difference is like unless you were there and lived it.
And I'll give you an example of what was really one of the things that's really different
today from punch cards.
We had what were called IBM 029 card punch machines, and you would put a deck of cards
in the machine and had a hopper that would feed one card at a time.
You tap the return key to get to bring the first card into the machine where you start
punching it.
And as you touch the keys, it actually punched the holes in the card.
So there was no such thing as a delete.
I mean, there was no backspace.
Once you hit the key, the hole was in the card, and if you had made a mistake, you just
push return through that card away and start it again.
So if you stood in the card punch room and listened a little bit, you could tell how
far into the card each person was because at the beginning of a card, you'd be typing
pretty quickly.
But as you got to about 40 or 50 characters in, people would slow way down because they
didn't want to make a mistake after having done 40 or 50 or 55 characters.
And today, of course, I absolutely rely on the backspace key.
If we didn't have backspace key, I'd have to do something else.
I type okay, but I'm not as accurate as I would like to be.
So if it wasn't for backspace, I would be much less productive in programming.
But another of the really big differences, I of course started with Fortran, and in school
I did Fortran, COBOL, IBM 360 and 370 assembly language, a little bit of Pascal, but not
very much, and Ada wasn't really on the horizon yet, and Java hadn't even been conceived of,
so never dealt with that in school.
And I'm not sure how familiar you are with Fortran, but in Fortran especially, we were
mostly using Fortran 66, which was the 1966 standard, and the first five spaces on a line
were the line number, and you didn't have to have a line number, but that's where they
went if you had one.
The sixth column was the continuation column.
Any character in that meant that this line was a continuation from the previous line,
and everything started in column seven, and you just had to remember that.
There also was no integrated development environment or language-sensitive editors or any of that.
I mean, you just had to know that.
And so the tools today are so much better and so friendly to, I think, especially new
developers learning a new language or new developers using something like VS Code, and
you install the plug-in that, you know, when you start typing the name of a function or
something like that, it basically will show you a list of what could go next, and so you
don't really even have to remember all of the names of everything, which is helpful,
I think, to everybody.
It is certainly for me because, you know, there's just so many more things available
today than there were back then.
In my professional life, I used DEC VAX computers, for the most part, and, you know, using the
VT100 or equivalent terminals, and, you know, of course, we never used punch cards for when
I was working for PAY, but I got pretty good with the editors on the VT100.
They had the keypad editing, which was great, but, you know, even that could not hold a
candle to the modern IDEs.
I mean, you know, VS Code or the JetBrains tools or things like Eclipse or I think there's
what's called NetBeans I used many years ago.
They all are just great.
The languages also being more available, when I first got out of school, of course, I was
working eight hours a day, and then I had a computer at home and I'd come home and spend
all day working, get a computer, come home, grab something to eat, and then spend three
or four or five hours at night also working on a computer, but, you know, if you wanted
to buy a compiler or assembler, I mean, they were, you know, a few hundred dollars each
and the tools were either non-existent or very expensive, so today with, you know, things
like VS Code being basically free, you can download Visual Studio if you're using it
for an open source project or a personal project.
You don't have to pay for that.
If you're trying to learn, that's great because you can learn it without spending too much
money.
No, JS, you just download, Python, you just download.
So the availability and quality of the tools is really one of the stark contrasts between
now and, say, the mid- to late-1980s.
I'm trying to think what else comes to mind that's, you know, that's a big contrast.
I mean, I think computers, of course, have gotten much faster.
Go ahead.
Yeah, no, no, no, I was just thinking, like, where you mentioned the fact that in modern
code editors, if you start typing, it'll show you a list of potential functions that's applicable
even to the specific.
It can detect what kind of object you have on the left-hand side, so it'll only suggest
functions that's actually available on that.
Like if it's an array, it won't suggest something that's only available on a string and that
kind of thing.
So even that, like they're calling IntelliSense.
But then over and above that, like more often than not, when you hover over one of these
specific function calls or whatever, it'll show you, like, integrated documentation that's
like usually pulled from MDN or something.
So even that's being brought into the editor.
And then I'm wondering, like, this next evolution where you get stuff like GitHub's copilot
where it sometimes suggests, like, here's potentially the entire function that you probably
want to write based on code analysis.
What do you think about that coming into, like, it's almost like a pair programmer that's
based on machine learning?
I have not experienced that yet.
I've read a little bit about it.
That to me also, you know, a few years ago they were talking about AIs beginning to write
code and, you know, they were going to be so much more efficient and effective than
human programmers.
But, you know, that hasn't really come to fruition.
So I guess I'm a little skeptical that that's really going to come about and be a major
factor.
One of the things that they've also has been kind of in and out of the news over the past
30, 35 years is this, you know, idea that we're going to have these libraries of reusable
components and to build a system, you just grab some components, you know, write a little
bit of interface code, you know, stick them together or ship them out the door.
And we haven't gotten there yet either.
And to me, I think the reason that that hasn't worked is because when humans solve problems,
we don't always necessarily do it in a strictly procedural way by following a certain sequence
of steps.
We'll use intuition, which I don't know how you would teach a machine to have intuition.
We use experience.
You know, what has worked or not worked before?
You know, we use the knowledge that we've gained and one of the things that I've always
found interesting when I've had the need or the situation where I needed to use recursion,
and I've written several functions in C that were recursive.
And when you need a recursive function, almost nothing else will do because you think of
writing this 15 or 20 line function that since it can call itself, you know, you don't need
to write too much more.
But if you had to write it out procedurally and do it, you know, calling a function and
calling another, you know, you'd get, it would be very untenable pretty quickly.
So how, you know, and how do you know when you should use recursion?
Well, it's one of those things where you're trying to solve a problem, you're trying to
solve a problem, and then you think, you know, this probably lends itself to a recursive
function.
And then you start looking at a little bit more and you start writing the recursive function
and yeah, and maybe 10 or 15 or 20 lines of code, you've got this function that does this
thing that you can't really keep in your mind because you can't iterate as deeply in your
brain and keep everything straight as the computer can pushing stuff on the stack and,
you know, just iterating and getting deeper and deeper.
And one of the things that I've always been surprised at when I've written recursive functions
is I never knew that I was almost done until I was done.
Because I'd be writing along and it'd be kind of working and calling itself and I'd be using
the debugger to watch it.
And then all of a sudden I'd realize, oh, that's it, and it's finished, you know, and
now it works.
And you know, I just, I never really knew when I was approaching that point, whereas
with other, with procedural type functions, you know, you pretty much knew, you know,
when you were almost done with the function, you just had a few more things to do and you
could move on and work on something else.
So it's fun, but I don't, I just, I don't know how you get a machine to do that or how
you create a set of components that you can pick from and without really studying it and
getting into it, you know that you need a recursive component rather than just some
procedural component.
And that's another thing that's changed since I first started getting into computing is,
you know, nobody had ever heard about object-oriented programming when I first started.
So everything was very procedural, very functional, you know, you wrote functions or subroutines
and Fortran and called them and, you know, you pushed arguments on the stack.
So there wasn't really this concept of an object that you were working with.
It was all basically arrays.
And then in C, of course, C introduced the concept of the structures and the, what do
they call them, where it could, it's been so long since I've written any C. There was
a way to have an area in memory that if you addressed it one way, it was like one set
of variables or one record format.
Or if you called it by another name, it was a, I think it was a joint or join or let's
join as a database thing.
But you could, but depending on which name you called it by, you could use a separate
set of variables within the same memory or region of memory.
And that was great if you were reading records from a text file and you didn't know what
the next record was going to be, you know what the different formats were.
So you had five or six different possible record types and you'd read the record in,
but you didn't know what type it was until you looked at the first four bytes and you
say, oh, this is a, you know, this is a certain type of record.
And so you would say, well, that's going to be, I'm going to call that, you know, A or
whatever.
And it would, then you'd use that until you get to the next record and it might be a different
type.
And I wish I could remember what the name of that was.
I'll look it up later and send you a message so that you can, maybe you can go back and
edit it in or something.
But object-oriented programming, and it took me a long time to get comfortable with objects
because having grown up and learned in a very functional procedural manner, wrapping my
brain around objects took a while.
And by a while, I mean, probably a few years at least, because it just, I guess, you know,
like everything else in life, you know, we have a resistance to change.
So I wanted to do things the way I knew how to do with them.
I didn't want to change to this new thing.
But then I finally did see the light and I woke up one day and thought, yeah, this isn't
so bad.
Maybe I'll, maybe I'll try this after all.
But those are, I think that the availability and quality of the tools, especially like
you mentioned, you know, the context-sensitive editors where it can tell you what the function
name could be or whatever.
And object-oriented programming is different.
And a year or two ago, I heard some people talking about this new thing called functional
programming where they, you know, they were using subroutines and functions and I thought,
yes, that's not new.
That's the old way.
So that was kind of interesting.
Yeah, that's pretty popular in the JavaScript world.
I know a lot of people are suggesting that that might be better than, because, I mean,
you can fake object-oriented programming in JavaScript.
And to some extent, I mean, JavaScript technically has class syntax, but it's not true class
syntax, you know, in the Java sense, for example.
But through that, you can sort of create this idea of classes and inheritance and all these
kinds of things.
And more so if you go for something like TypeScript, then you can probably get closer to true object-oriented.
But I do find that a lot of folks are leaning more towards functional programming and there's
some stuff built into JavaScript that lends itself to that, like your MapReduce filters,
functions that you have on arrays, so you're not actually changing the underlying array.
You're doing some function, you're running some functions on the contents of it and creating
a new array, but the old one is still left intact.
And I think that is what they call having functions that have no side effects.
So if you give it the same thing, it'll always return, give you the same result, there's
no surprises.
So it's interesting.
I think in a lot of ways, we go forward and then we step back a little bit and then we
go forward and then we step back a little bit.
I think the same thing happened with Jamstack where, I mean, some aspects of Jamstack is
new, but the underlying idea behind it is pretty much like we used to build websites
back in the early 2000s, where it's nothing more than just HTML, CSS and JavaScript that
sits on a server and it's just pushed to your browser.
Of course, with the modern capabilities of browsers and stuff, you have all kinds of
stuff you can do then on top of that to enhance the experience, like making stuff available
offline, being able to respond to different screen sizes and environments and all that
kind of stuff.
But the basic idea of serving static pages, that's something that happened way back in
the day.
And now it's again evolving.
Now it seems like people are kind of still interested in Jamstack, but now they're embracing
this new thing of edge functions and serverless, which I'm still trying to wrap my head around
exactly what that all means.
Yeah, me too.
These serverless functions, I haven't really looked into that deeply.
I've read a little bit about them in the context of the Microsoft Azure offerings, but I haven't
really tried anything with them.
But what you're talking about just a minute ago with JavaScript, we used to call that
back in the day either calling something by value or by reference.
If you call it by value, you change its value perhaps, or not, you don't change.
If you pass by value, then you can't change the value because you don't know where it's
stored in memory.
So you just have to return something else.
But if you pass something by reference, then you have the pointer to where it's located.
So you can actually change the thing that's being passed.
And I always thought that was pretty cool.
But I wanted to say something about JavaScript, and I like JavaScript.
I've written a fair bit of it.
In fact, last year I did the, I don't know if you're familiar with the advent of code.
It's a set of problems that this guy does every year for the first 25 days of December.
And the problems get more and more challenging as you go through the 25 days.
And there are two parts each day.
And I used JavaScript last year to do that, reasonably far into it before I kind of threw
my hands up and said, well, I both, A, don't have time to work on this all day long.
And the problems were getting like really complicated.
And I just thought, well, I'll do this again next year.
But I also wanted to learn JavaScript.
The more I've learned JavaScript, and you know, when you're talking about the different
ways to do things in JavaScript, I'm almost always reminded of a quote that I read.
I used to actually had a copy of it pinned up to my wall when I was working.
I wish I still had it, but I'm paraphrasing a little bit.
But the effect of the quote was when you're writing code, you're not trying to tell the
computer what to do.
What you're trying to do is tell other programmers what you're doing, or maybe even remind yourself
six months from now why you did what you did and why you did it this way.
That is so, so true because the code that I've written in C, I would do a project, get
finished with it, put it away, maybe six, eight months or a year later, the guy that
I wrote it for would come back and say, hey, we've got another set of data, but now we've
got this different kind of quirk.
And hey, can you get that code out and add it enough to do this and then process it?
I did lots of what's called data reduction and analysis and processing.
And so I'd say, yeah, sure, I can do that.
And I would take out, I'd go find the file and edit it.
And sometimes, especially early on, I would look at the code and I'd be like, who wrote
this?
And why do they hate me?
Because it was foreign.
So that encouraged me to both start writing better comments in the code and also to start
doing things in really the simplest way possible.
Even if there was a clever way of doing something, I would think, if I ever have to come back
and look at this, am I going to be able to figure out in the future how clever I was
today?
Not that I'm all that clever of a person, but sometimes I would think about kind of
a cool way of doing something.
And in my opinion, the simplest way to get the job done, as long as it's not horribly
inefficient, is probably the way you want to do it.
Because when you go look at it later or if some person that's maintaining the code looks
at it a year from now, they'll be able to figure out what it is you were doing relatively
quickly maybe.
And they'll be able to maintain it or update it or use it in a way that will be effective
for them.
In JavaScript, every time I look at a book on JavaScript, there really are too many different
ways to do any one thing.
As JavaScript has evolved, things have improved, but it used to be like the asynchronous communications
with JavaScript.
It was the try and catch, and then at some point they introduced the promises and I don't
know what they're up to now, but you want to use the way that works the best.
You don't want a lot of network congestion, but you also want to use code that's going
to be understandable.
And JavaScript gives you plenty of ways to just really get out there where you will never
come back.
It's got too many ways of doing things, whereas Fortran had too few ways of doing stuff.
C had about the right amount if you ask me, but then I have a special place in my heart
for C language.
I really enjoyed both the years, the time in my life, and C programming were all very
good to me, so I remember that very fondly.
Yeah, I agree.
JavaScript has evolved quite a bit in the last couple of years, not all of it necessarily
for the better.
I think there's been a lot of syntactic sugar added to the language, and I'm not always
sure if it's good for new people.
I think a lot of it can be super confusing.
For example, you can create a function using the function keyword, but you can also create
a variable and store a function in it where you use the fat arrow syntax.
The thing is, it's not actually exactly the same thing.
They're both functions that has a call signature that you can call, but the value of the this
keyword in a function defined with the function keyword and with arrow functions is not the
same.
This keyword in JavaScript has been problematic in the past, and they essentially fixed it
in arrow functions, but now it's important that people know the difference.
In a way, they fixed it, but in a way, now you have to adopt one of the two, because
otherwise you're going to potentially confuse yourself, because you're going to say, okay,
cool, I could just use this dot blah, and then suddenly you're in a functions context
and it doesn't work, but why the heck is it not working?
It's literally just because the value of this is different, and there's some other syntactic
sugar things as well.
I think one of the recent additions is this ability, I forget the name, but so essentially
instead of having to do if this thing and then do a chain, like say if variable and
variable dot something else property, then do this thing.
Now you can do variable, and then you put a little question mark, and then a dot, and
then the other property, and that's like a shortcut for it, and it's not always obvious
what the heck that question mark does.
I'm pretty sure if people new to code looks at that, it's not going to be immediately
intuitive that that's actually checking, it'll only try and read the property on the right
if the thing on the left exists.
So if the thing on the left is undefined, it's not going to try and read the thing,
so it won't throw an error saying cannot read length of undefined.
You avoid that, but at the same time I'm not sure if that syntax is very intuitive, that
that is what it's doing.
Yeah, it's not intuitive.
I know what you're talking about, and the first time I saw that I thought it's really
nice that you can avoid the problems with undefined variables, but is it really better
than checking to see if something is defined first and then doing it in an if statement?
Is it really worth saving two lines of code to do this very kind of complex, different
looking construct, and I'm not sure where I fall on that because I haven't had an occasion
where I've written that type of construct yet, so I mean maybe it is, and also going
back to functions, the anonymous functions in JavaScript gave me fits at first.
I found them kind of difficult to construct at first and probably would have a problem
with them now because I haven't written JavaScript very much recently, but my understanding is
that the anonymous functions have the advantage that once they're used and they're out of
scope they're no longer taking memory, which is probably a good enough rationale to use
them when you can, but they certainly can be confusing.
They're also hard to debug because if something happens in your code it doesn't have a name
to reference because it's anonymous, right, so it can't tell you function with this name
is where the error occurred, it's more going to have to try and tell you on which line
it happened and then you're on your own there.
Then you go back to the tried and true age old method of debugging of putting in print
statements to say, okay, hey, I passed this line and now I'm at this line and now I'm
at this line and this variable is now this and this and this and, you know, symbolic
debuggers were also just an incredible advancement in debugging. It really beats the endless number
of print statements that you have to put in to figure things out.
That's true, but at the same time I wonder how approachable they are because I still
find more often than not people using console.log or console.error or whatever to figure out
what the heck's going on other than flipping open the developer tools and using the script
debugger in there. I very rarely work with somebody that uses that as opposed to using
just console.log statements. Like me myself, I mostly use console.log. I've always mean
to study like these things because I know that if you know how to use it well, it's
probably going to serve you better and save you time, but you need to make time to learn
it because those things are pretty complex.
It is. You're quite correct and I think that there's a tipping point in there that, you
know, if you've got a small section of code that you're working with and you need to figure
something out that's not terribly complex and you're not, you know, deep into a three
or four dimensional array, yeah, putting a console.log or print statement or something
like that, you know, that's kind of the first line of defense. But very quickly, if that
doesn't show me where the problem is, I am much quicker these days to, you know, open
the developer tools, go in there and see, you know, with Visual Studio to open the debugger
and just start working through it because being able to set breakpoints and watch variables
and see exactly what is in memory without having to put in statements that you then
have to go back and take out or comment out is really, it's almost magical what debuggers
can do today and I would say I would encourage anybody, yeah, I mean, a couple of console
log statements or print statements in Python or something, you know, if that gets the job
done that's fine but it's, you'll do yourself a favor if you start learning the debugging
tools because they can really, not only do they, not only can they show you what the
problem is but sometimes they can also illuminate other issues with the same code that you might
not see until you get to a boundary condition and that, you know, that I think also is valuable.
Yeah, yeah. I wonder if one of the reasons people haven't adopted these as much is maybe
a lack of educational material in this area because, I mean, not that I've really dug
deep for this but I haven't really that just, I mean, I see a lot of news about what's happening
with the developer world and nothing like this has really come across my radar where
there's this like, oh, there's this course by X on using the debugger tools in Chrome,
for example, that's really amazing and you should take it and you'll never use console
log again. I've never really seen that. So I wonder if that's maybe, if that's an area
of opportunity in the educational space. I think you're exactly right and, you know,
that's probably one of the things that the Mycelium network could help people with and,
I mean, the group that you've created, I think is fantastic. It's a good idea. It's helpful
to people at multiple different levels of experience and learning and, you know, that
I think would be a good venue for helping people at least to start using the tools that
are available and you're exactly right. Everything that I know about, especially the developer
tools and Chrome or Edge or Firefox, I've learned just by poking around or I've looked
on one of the, done a search on and the name is Escaping Me. It's just one of the sites
where everybody goes to ask programming questions and I can't think of it.
Stack Overflow?
Stack Overflow, yes, indeed. You know, I'll go there and have to say, hey, how do I do
a search? How do I do this? I've seldom asked questions because almost always I'm able to
find somebody else's question that's very similar and I can figure it out from there.
But people will say, well, if you open the developer tools and go to this pane and do
this, you know, you'll see, it'll show you that. And I think, oh, that's cool. I didn't
know that. So I go try it and hey, that really works well. And I kind of file that away.
And the next time I need to use something like that, I hopefully remember that I can
go to the developer tools and look at that. And I do that with CSS all the time. I mean,
when I'm working on a website or working on CSS, I invariably have the developer tools
open to the CSS that's being actually the CSS that's being applied. And, you know, being
able to tweak the CSS and see the change immediately is just so much better than, you know, change
it, try it, change it, try it. It's such a time saver. And I use Edge. I'm not a Microsoft
fan boy. But I like Microsoft better than I did in the 80s. I tell you that. It's a
different company, in my opinion, but we won't go down that road. With the Edge tools in
the way that it's not really a server. It's kind of the server that you can plug in that
you can get for VS code that opens Edge and runs your code in it. And I didn't know this
before I did it, but I realized one day that when I was changing the CSS in the panel on
the developer tools, it was actually changing it back in my source file. And so I thought,
hey, that's pretty cool. If I find out what I like, I don't even have to go back. I just
kind of double check, you know, look, make sure that it's there and I'm good to go. So
that's, you know, we're getting there. I don't think we're at the utopia yet, but it's, things
are a lot better than they were even 10 years ago or more. And my first experience with
web development was in the very late 90s. You may recall that people were worried about
the Y2K problem and the conversion of the dates and everything. And one of the things
that I was working on was a project to make sure that, you know, we were, we were ready
for Y2K. And so I developed a website to track some of the issues. And that was before JavaScript
even. And, you know, there were no real databases. So those were the days of the CGI scripts.
And I was writing C code and putting it in the CGI directory and then doing the calls.
And I couldn't even do that today. I'd have to learn how to do it again. But it was, you
know, people think, well, those were the days. Well, those were the days. But I don't want
to go back there because what we have now is so much better that, you know, it's, you
can, you can remember fondly that you did that. But, you know, it's like, I grew up
in the, in the, in the southern part of the United States, the southeastern part. And
it was fairly warm in the summertime. And for the first several years of my life, we
didn't have air conditioning. And so, you know, once we got air conditioning, you know,
I don't want to go back to a time without air conditioning, even though I don't, I
don't live that far south now, it still gets pretty warm and somewhat humid here. So, you
know, like my air conditioning, you know, I fondly remember, hey, we got, we got by
without it. But I don't want to go back there.
Yeah, yeah. And I do think the CSS tools are much more approachable than the JavaScript
debuggers. But again, I think it's maybe just a lack of knowledge and a lack of educational
material. Maybe they aren't just as approachable. It's, it's obviously a completely different
paradigm. But, you know, a lot of it translates like the same way which you can see, oh, this
CSS is being applied to this element. You can see, oh, at this point, this variable
has this value. And I'm pretty confident you'll be able to change the value and see the impact
of it in that. I think one of the tricky things with these debuggers, and again, it's probably
an educational thing, but with the use of frameworks, I think oftentimes it's, it's
a little tricky to avoid stepping into the code that is actually part of the framework
and being completely lost. And then having to dig your way out of the framework code
back to where it's, again, the code that you wrote to get to the problem. But again, you
know, because you have step into, step over, and all those kinds of things. So it's understanding
when do you want to step into, when do you want to step over, so that you avoid drilling
into the stuff. But with that said, I do know that the Chromium dev tools have this ability
to exclude certain libraries. So you can say, by the way, anything that's like jQuery, don't
go there. So if something is, would have stepped into the jQuery code, it'll just step over
it instead.
Oh, that's cool. Yeah. But again, I was going to say, I remember back in the late 80s, I
was doing something with the Visual Studio and I was doing some debugging and I accidentally
stepped into one of the dynamic league libraries and windows. And I was immediately, you know,
I had no idea what I was looking at. And then of course, I didn't have the symbols for that.
So it was all just basically Greek. So basically, I started again and made sure I stepped over
the next time. But yeah, you're exactly right on that.
Yeah. So to switch it up a little bit, I read that you are really into cars, automobiles.
And I know recently you've gotten into motorcycles. But the one thing that I, when reading the
history that you have on one of your blogs, the one thing that's been common throughout
that entire line is you would always join these automobile clubs. And I mean, automobile
clubs are essentially communities. So I wonder with that in mind, like, what does community
mean to you? And what led you to this, this, this, what can you call it, this pattern of
always reaching out, always searching out for a community around the specific interest
that you have? Well, let me tell you what I think community
means to me is a group of people that have some common interest or common bond and are
willing to both share their knowledge and excitement with others and also help others
who maybe don't have as much experience or haven't lived through some of the early part
of like, say, cars in the 60s and 70s being different from today, for example, to help
them along to understand maybe some of the changes or whatever. So it's really a community
to me as a group of people who are all interested in some topic, helping each other to understand
it better and move forward either individually or as a group to improve the topic, if you
will, if that's doable, or just to enhance each other's enjoyment of a particular brand
of car, type of car. And in the tech industry, being able to ask questions and learn from
people who have done things, then you need to do this and you're interested in learning
how to do it. But, you know, a lot of the documentation, and I'll use Git and GitHub
as an example, the documentation can be both very accurate and very unapproachable at the
same time. I mean, when I go back and read some of the documentation that I read a long
time ago, now it makes sense, but now I know how to do what it's talking about. And so
recently I asked you, how do I do this? And you were very gracious and walked me through
how to do this thing that I was trying to do. And I had looked at the documentation
and it just didn't, it just, I couldn't figure out, it didn't make sense. I didn't know
why, how to put the steps together or what the motivation for doing that was. But having
somebody who has experienced that and is willing to say, well, you do it this way because of
this and here is the, I think, workflow or the flow of anything is not immediately apparent
when you're working on something that's new to you. You don't see the overall
picture. You see the piece of it that you're working on right now. And so having somebody
that understands the whole subject or all of the workflow is just invaluable. And I
think that's part of being part of a community. And the reason that I always, the reason that
I personally, just for me, seek out those types of communities is because as an extreme
introvert, I just, I have no ability to engage in small talk. I mean, it just exhausts me
trying to chat with people about nothing. I mean, I've gone to parties that didn't
really have a theme or anything that everybody was interested in. It was just, hey, let's
get together and have a party. And after about 10 minutes, I'm thinking, well, I could be
doing something else. And it's just, no, we're not talking about anything that I'm interested
in. So I'm just going to leave now. So in order to have a community, I seek out people
that I share a common interest with. And of course, the more interest that I share with
a person or a group of people, the better that is, because that gives me more points
of connection if you want to look at it that way. And so that has been, the internet age
has really been a good thing for me because I've been able to connect with folks who I
would never have known if it weren't for some group. And the way that I first got exposed
to Discord, one of the things that I do, I play some video games on both consoles and
PC. But I play Final Fantasy XIV off and on. I'm not on every day. But when I got to a
certain point in that, I wasn't making much progress because I wasn't sure what to do
next. So I kind of sought out a community. And somebody said, well, why don't you join
this Discord server? And there's a bunch of people there. And I thought, well, I don't
even know what Discord is. So I looked it up and signed up and joined the server. And
the folks there were great. I put a question. And within minutes, usually, somebody had
said, well, you should maybe look at this or try this or whatever. And I went from not
having any idea what to do to having almost too much information on it. And so that's
kind of the other side of the coin. But the communities that I've been able to find on
the internet in general, but Discord specifically, have been quite helpful. Also, as an introvert,
it allows me to control the amount of interaction. So if I get to a point where I'm just, I can't
do it anymore, I can sort of walk away from the computer or just stop reading it for a
little while. And it allows me to read something, read an answer that somebody's provided, and
then think about that. And it's asynchronous. I don't have to respond right away. I can
take my time to internalize it, think about it, decide what my approach is or what my
thought is, and then I can reply if it's necessary. So that has been very good. Whereas in a face
to face meeting or communication, and I'm not against that. I can do that. It's just,
I'm sure you've been in meetings where all but one person in the meeting, it's clear
that we're done, it's time to go, we're finished with this. There's this one person
who just keeps, they just can't stop. And so that I find really frustrating. So I can
do the in-person meetings, but in in-person meetings, people tend to expect a response
pretty quickly. And I don't always have a response quickly, especially if it's a question
or something that I need to think about for a while. And so online communities are just
great for that because I can look at something, read it, and somebody's got a question, I
think, well, I kind of understand what they want, but I'm not sure how to phrase it. So
I'll go away for a while and it sits in the back of my mind. And then later on, I'll come
back and say, oh, yeah, this is the way I want to put this. And I type the message to
them and it makes sense and it helps them. And that's wonderful. I enjoy helping people
and I want to help be as good to people and help them as much as I can. But sometimes
I have to have to think about how to do that. Yeah. Yeah. Not for sure. No, I completely
understand it. I also like the asynchronous means of communication. I had it in a meeting
if somebody puts you on the spot to estimate a timeline or to give an answer to something.
It's like, don't put me on the spot like that. I need to think about this. Otherwise, I'm
going to say something and then I'm going to probably regret it. And at some of these,
for one of the clients that I've worked for a long time, they have these all hands meetings
where everybody comes together. And I oftentimes have to excuse myself and go to my hotel room
just for a while, just to decompress because I can only social so much and then I need
to decompress. Well, and the more people you have in a room at the same time, especially
a meeting about something, the more avenues of communication you have. So you're trying
to deal with all of that. You're trying to maintain the lines of communication to each
of the other people in the room. And when you have too many people, you just really
can't do that. So they used to, one of the projects that I was on, they used to have
these like week long meetings. I mean, they would get people from all over the place and
we'd sit in a big conference room and there'd probably be 40 or 45 people in there. And
it was just all day long for all week. And so little would get done because everybody
wanted to have their voice heard and put their two cents in. And I thought if you would just
break this down into its component issues and then have the people meet that have a
vested interest in that issue, get those people together, the three or four or five of them,
let them hash it out for an hour or so, they'll come up with a solution. But in a room of
40 people, it's really difficult to do that. And then somebody had in another project,
they had an epiphany. I said, hey, when we have meetings, we're not going to sit down.
We're going to stand up during the whole meeting. And that kind of focused people's thoughts
because instead of sitting there eating donuts and drinking coffee, they're standing there
and people get tired of kind of standing up doing nothing. So that was helpful. So being
able to focus is an art form in some sense. And it's necessary to get real work done.
I mean, if you just want to stand around and chat for a while, that's fine. But if you
want to solve a problem, you need to focus on the problem, get inputs from people who
are stakeholders who have a vested interest in that problem, and then find something that
will work for the majority or all of those people. And large meetings make that difficult.
That's for sure. So when you talked about how things have improved in terms of the languages
that's available to us, the tooling that's available to us, and how the industry has
moved on and how you used to be able to work. I also think about stuff like in the past,
if you wanted to learn something, you had to go to the bookstore and buy a book and
they were very expensive. Unless you had a library that had a really good collection
of books, you pretty much you had to save up and go buy that book. These days, of course,
that's almost unheard of. You just do a quick search and you find a thing or you find an
online course or you use institutions like Stanford with their open curriculum and the
access to information is just incredible. But with all of that, I saw you mention in
one of your posts about the movie Hidden Figures. And what's been highlighted in there is this
role that women and underrepresented people actually played in something as monumental
as the moon landing and all of these kinds of things. So I'm wondering, with all of this
improvement that's happened, do you think the quality of software has actually improved
in step with all these other improvements that we've had? And secondly, in general,
do you think that the tech industry has really improved as much as you would have thought
it would seeing that we have had all of these underlying enhancements and improvements to
the way we work and the languages and the tools we have access to?
I think software, the quality of software in general has improved. It still got a ways
to go, but some of the testing approaches that are being used now, I think, are making
software more reliable than it was. And I mean, the thing that I would point to on that
is the difference between, let's say, Windows 3 and Windows 11. And I remember Windows version
3 and 3.311 specifically, because that was the one where they added the networking capability.
But it was probably multiple times a day. I was doing a hard reset on the machine. I
was doing a hard reset on the machine because it got into some state where it was no longer
paying any attention to the mouse or anything. So if you can reach the big red switch, you
turn it off, wait a second, turn it back on, and start over. And that does occasionally
still happen, but not nearly at the rate that it did in the mid-90s. I would say these days,
I mean, my primary machine stays on 24 hours a day, 7 days a week. I mean, I log out, close
the lid of a laptop, turn the monitor off at night. But it'll run for sometimes weeks
at a time. And the only reason I rebooted is because there's an update that requires
a reboot. So I think things, the quality of some software has improved. It's not really
consistent across the board. Some shops have done a much better job at improving their
quality than others. But yeah, that's just the human condition. I mean, some brands of
automobiles are much more reliable than others. So that's just kind of the way things work.
As far as making progress in treating people more equitably and having a wider representation
of people in the field, I wish we had made more progress in that. I have worked with
all different types of people from all ethnic backgrounds, lots of people who did not speak
English as a native language. One of the projects I was on, I traveled to Germany multiple times
a year for two or three weeks at a time and saw the difference between the culture here
and the culture there. And you realize pretty quickly that you have to give people grace.
When you go somewhere else, you're necessarily going to be in a different environment. And
so you have to be open to differences from what you're used to. And the think tank that
I worked for was an interesting place to work because like 95% of the folks there, the staff
members had at least one PhD, sometimes more than that. And almost all of them were in
what I call, and I think most people would refer to as the hard sciences. We had lots
of physicists, lots of astrophysicists, mathematicians, statisticians, chemical engineers, that type
of thing. And it was mostly white males. But we also had people of color and not only black
and brown people, but also Asians. And I mean, pretty much a little bit of everything. We
had women who worked there. And I just always try to treat people like I would want to be
treated. And I try to just look, they're a person, they're an individual. And be as accommodating
as I can and help them out and not be mean or evil or whatever. And I think that has
to do with the way that I was raised, more than a conscious decision to be that way.
As I mentioned, I grew up in the deep southeast in the United States in the late 50s and 60s.
I'll live through a lot of the stuff that went on during that time. But my father was
a civilian employee at a military base. He was civil service and worked as a civilian
on a military base. And he was dealing with mostly non-commissioned officers like sergeants
and things like that. And they came from all over the place. And so, you know, often at
Thanksgiving, he would say he would invite one or two of them to come have Thanksgiving
with us, because they were in a situation where they couldn't go back to where they
were from. So we would have people from different ethnicities and different backgrounds. And
sometimes radically different belief systems than us. And my parents just always treated
them the same as they would treat family. And so I just kind of grew up thinking that
this is the way you treat people. You treat them with compassion and if they need something
you try to help them. And, you know, when I got kind of into the real world and realized
that not everybody does that, I was saddened by that because, you know, there's no reason
for it. I think we need to give people the chance to excel to whatever level they are
able to, given their intellectual capacity and their determination, their interest, their
motivation. I mean, you know, people are all different. And, you know, a lot of people
are a lot smarter than me and a lot more successful. And hey, that's great. But, you know, I don't
fault them for that, because they haven't tried to prevent me from being what I wanted
to be. And so in turn, I try to never prevent anyone from attaining what they want to attain.
And if I can help them get there, I'm going to do that. I mean, one of the things that
I learned from my father, who was a good man, was that if you can help somebody, you do
it. You don't pay attention to what color their skin is or what they believe in or where
they came from or, you know, what sex they are or whatever. If you can help somebody,
you help them, you know. And he did that his entire life. And so I hope that I am like
that. I want to think that I am. I try to be. And so I think if we would all be that
way, maybe the world would be a little better. Yeah, yeah, that's beautiful. I totally agree.
And I can say from what I've from the interactions I've had with you and seen you have with others
on the Mycelium Network, you're definitely following in the footsteps of your father.
So you can rest assured of that. Yeah. So I also read your blog where you're detailing
your journey of getting back into the tech world and specifically web development. And
you had this kind of mantra of sorts that you wrote that I really liked. And what you
wrote was, start with the basics, be consistent, write some code every day, and stay focused.
I think that's tremendous advice that I would echo to anybody that's getting into any industry,
really. But especially like in coding, that is definitely something great. So how's your
journey been so far, getting back into the industry and specifically this web development
industry? Well, if I could follow my own advice, I'd probably be doing better. But it's one
of those things where you know what you should do, but the distance between knowing what
you should do and doing it is that there's not always an easy path. And so I would say,
I love programming. I mean, I could, you know, when I get immersed in a programming problem
and project, you know, I can start and I think it's been five minutes and it's really been
five hours. And it's just, you know, it's like no time has passed. And I'm sure you
have experienced that. But during my career, I got pulled into different aspects of computing
and I'll use computing in a very broad sense. So that, you know, after probably five or
six or seven years of really writing Fortran or C pretty much all day, every day, I got
into, well, we need somebody to, you know, create a database. And so at the time, I think
Ingress was one of the databases that was available on the VAX. And, you know, so I
would learn the language for that and started, you know, designing things and creating tables
and relations and all that. So that that was sort of like programming, but not really.
And then I started getting pulled into some like system administration type stuff. And
I started running some, well, they used to refer to them as workstations like silicon
graphics. We had a couple of silicon graphics workstations, you know, the high end graphics
workstations. We had a couple of HP, you know, workstations running HP's version of Unix.
And so I got into that and that was that was less like programming. But, you know, these
people were paying me to show up and do what they needed me to do. So they said, we need
you to do this. So I did, I did what they needed me to do. And then it kind of went
from there. And I got into doing some what would now be called cyber security. They actually
sent me to, I don't know if you're familiar with the SANS Institute. You can look them
up on sans.org. But I've taken, you know, they paid for and sent me to take like five
or six of their different courses. And, you know, security is necessary. And it's, it's
a little bit interesting, but it's not coding. So over the years, I got away from programming.
And that's, I mean, that's, that's, that's why I got into this to start with. I mean,
I went, I told you, I went to that Fortran course and I thought, yeah, this is great
stuff. And I started, you know, banging out code. And, and, you know, you'd run, you'd
go to the card reader and read your deck in and you'd wait, I don't know, an hour, hour
and a half or 45 minutes or whatever it was, depending on how busy the computer was. And
then you'd, your printout would come out and you'd see the listing and then the error message.
Oh, I got, you know, so I got to go back and change this and change. And then when it finally
runs, it's like annihilation, you know, it's, it's a, it's a, it's one of those small successes.
And I, you know, I, that, that, um, I, I really enjoy that. I, I, I like to have, have code
that I've written and run it and see that it works. And man, that's just great. So when
I, uh, when I basically retired, um, from full-time work and I kind of, I also had a
business on the side doing IT management for small businesses in the, in the area where
I live. Um, you know, doing network administration and server administration and updates and
you know, all that good stuff. Um, and so I finally got most of those clients transition
to other providers and I was able to stop doing that. And I thought, well, now I can
get back to, to coding. I want to, I want to write some code. And at the time I looked
around and thought, well, you know, writing code today pretty much means websites. You
know, it's, it's either, you know, WordPress plugins or themes or something of that nature.
Um, but, but it was, it had changed so much from the last time I had done that, that type
of thing that I was faced with this just overwhelming number of options. Um, and you mentioned your
frameworks and not only frameworks, but languages and, um, you know, WordPress versus Joomla
versus, you know, roll your own website. And, um, uh, you know, what is it? My SQL versus
Maria DB versus no SQL databases or, you know, and so it's, uh, it's kind of a bewildering,
um, uh, landscape of possibilities. And so I thought, you know, that that's where I thought,
you know, I got to, I've got to concentrate on the basics. I need to, I need to figure
out what is the kind of basic set of, of, uh, of, um, software and skills that I need
to work on to be able to do this. And that, you know, to me that turns out to be HTML
five, CSS three, uh, and JavaScript. And then, um, my SQL typically is, is very available
on most, uh, um, uh, web service, you know, web server providers. So those, that's what
I sort of started concentrating on. And then of course, PHP is, is easy, uh, to get access
to also, uh, because so many sites are running WordPress. Um, so, you know, PHP is almost
always available. And, uh, so I, it, it, I, I had to really, um, kind of figure out what
pieces I wanted to start with because I was fairly familiar with HTML back in the early
days. Um, but that, that has changed with HTML five. They've added new, uh, new tags
and you know, it's better, but it's a little more to know. Um, and then CSS, I mean, I
was using inline, uh, styling, uh, back in the late nineties, early two thousands. Um,
but you know, CSS and now with, uh, CSS being able to import, you know, other, uh, CSS files
that that's, that's a good thing. And so it's been, it's been a journey. Um, but yeah, I
mean, trying to, trying to stay focused on the basics is also kind of difficult though,
because you know, you, you're here about some, you know, cool new technology and you want
to go look at it and kind of say, well, how could I incorporate this and what can I do
with it? Cause it, it's so new and it's shiny and you know, um, and so you want to do that.
So I, it's, it's a, it's a challenge to really stay focused. Um, it, it's also a, a terrible
challenge to, to write some code every day. I mean, I'll, I'll, I'll, I'll say, okay,
I gotta, I gotta start coding. I will write some every day and I'll, I'll do that for
a while. And then there'll be something that happens. I mean, life happens, you know, there'll
be something that I have to go do one day and I can't get to my coding that day. And
when you miss one day, then it's easy to miss another day. And pretty soon you haven't coded
anything in two weeks. And, um, so it's, it's, it's been challenging, but it's, it's also
been a, it's been fun because, um, I am fortunate enough not to have to do it as a, as a money
making proposition. I mean, with, with my, my wife's retirement, my retirement or social
security and stuff like that, you know, we're, we're not rich by any stretch of the imagination,
but we're, you know, we're, we're okay. And so, you know, I'm at the, I'm at the point
where if I say, yeah, I just don't want to do anything to almost sit around and read
or, you know, just go to the park, take a walk or go to the beach or whatever. I can
do that. Um, and you know, a lot of, and I, I realized a lot of people, most people aren't
in that situation. Um, so I, and believe me, I, I realize I've, you know, I've, I've got
it pretty good. Um, but I still, I still try to maintain, um, some, uh, some momentum and
some motivation because, you know, if it, there's nothing else to keep me motivated
right now other than either my self motivation or if somebody says, Hey, I, I, I, I'm having
a problem with this. I don't, don't know how to do it. Or I, I don't know how to write
this function to do this thing. Um, can you give me a hand? And that, that gives me a
specific thing to work on. And I, I find that to be much easier than, than to find internal
motivation to do it. That's why I told you last year, I did the, the advent of code and
this it's an every year thing. The guy doesn't does it every year. And I'll probably do that
again this December to, um, you know, to, to focus my efforts on, I'll probably use
JavaScript again, using node JS, uh, to do that, um, to, to hone some of those skills
and to, to try to improve, uh, in that, that area, because that, that gives me a very good
focal point. Maybe I use Python this year. Anyway, I haven't decided, but you get the
idea. Um, it's, it's, it's a, it's a way to maintain, um, focus and motivation without
having to continually come up with something new. And that, that, that's the challenges
is finding something interesting to do. Yeah. I know for sure that it's something I need
as well. I, I can't just, I think I've mentioned it a couple of times from some of the other
podcast episodes. Like I can't just learn something for the sake of learning it. I need
an outlet. I need an outlet for it. Um, otherwise I either lose interest or I go down rabbit
holes that doesn't serve me in any way. Um, so I totally get that. So, um, in closing,
I know you've mentioned that you, uh, collect coffee cups and now I partially know why you
do that because you also love coffee. So what is it that you like about coffee and what
is some of your favorite coffees? Um, I like everything about coffee. Uh, I like the aroma
of the uncooked or the, you know, the, the aroma of the ground beans. Uh, I love the
aroma of the coffee while it's brewing. Um, I actually liked the taste of coffee. I know
a lot of people don't. Um, I just, I, I, I enjoy the warmth of the drink itself. Um,
I enjoy the, um, the activity that surrounds coffee. I mean, we, we, my wife and I live
on a small lake and we have a patio that, uh, with the back of our house faces the lake
and we have this nice patio that's covered and on nice days, uh, we have a table and
chairs there. We can take a cup of coffee out and, um, talk about life, the universe
and everything or, you know, uh, you know, read a book or whatever and have a cup of
coffee and it's just, it's just really nice. Um, I, I, I tell you what the coffee that
we're buying right now is from a small roaster. I think they're in California. It's called
Angelino's coffee and it's a, it's a family owned and run. Uh, I think they do everything
from, from, from, I mean, I think they grow their own beans and everything from there
to the finished ground product. Um, and the reason that we're using them now, rather than
I was buying a lot of caribou coffee, which is a larger, um, um, manufacturer, I think
the space in Canada. Um, I was using caribou and I like, and I like their coffees a lot,
but we had, we switched to the Keurig machine a couple of years ago, two or three, probably
more than that. Now I have, uh, I've gotten to the point where caffeine upsets, uh, my
heart rhythm. So I've, I've had to switch to decaf coffee and my, my wife still drinks
calf fully caffeinated coffee. And so, um, rather than making a pot, we, we have our
own coffee pods and a caribou Creek for a while was, was great, but then they were,
their availability of their K cup, uh, blends was, was kind of spotty. Um, green mountain
makes makes, uh, is, is a, makes pretty good coffee, but we always try to get the, the
dark roast. We, we prefer the darker, uh, roast coffees. Um, and, uh, basically anything
from Kona in Hawaii, uh, you know, anything that comes from there is going to be good
coffee, uh, Colombian, the Colombian coffees. But, but I, with, with our, with the coffee,
um, that we buy, I, I take the same approach with that as I try to do with anything else
that I can, I try to support small, uh, businesses, either local or, or a family owned business
that somewhere else is selling over the internet. Um, you know, the, the, the individual entrepreneur
and their, their family, I think that's, I like to try to support those people to, you
know, to encourage them to continue. And as an encouragement to other, you know, would
be entrepreneurs to, you know, to, to try whatever it is that they're interested in
and, and provide that. I mean, I think too, too many people just, you know, go to Walmart
or, or whatever the local, you know, big store is and, and buy everything. And they don't
think about, um, how that affects the small businesses and the small business owner and
the families that have been, and that have been doing something for generations. And
now they're, they're basically priced out of the market because somebody comes along
that can do it, you know, 3% cheaper. And a lot of people only think about the cost
to them to buy this, to buy whatever it is they need. And they don't, they don't think
about, you know, the effect on the larger world and, and putting some of these people
out of business or, or, or, you know, their families not being able to, to make a living
from this family business has been in the family for generations and now they have to
do something else. So I really, it's not always possible, but whenever, whenever I can, I
try to support a small business. And I think Angelina's, I don't have, I don't own stock
in them. I don't have any, I don't have any, you know, advertiser relationship with them
or anything like that, but I like their coffee. Um, their website works really well. Um, it's,
it's easy to order and it tastes good. And, uh, so we're, for the time being, we're sticking
with them. Yeah, that's good. Yeah. I'm also, um, I've also had to switch to Decaf, um,
for similar reasons. Um, for me, it's an anxiety thing. Like it, if, uh, the coffee is a little
too strong, uh, it does make your heart beat faster and that, that can make you anxious
if you're prone to, to being anxious. Um, but yeah, I think that there is definitely
something special about coffee. Um, and like you said, the whole ritual of, like not instant
coffee. Like that's okay, but I know I, I like the ritual of, like, I'd like to buy
the beans and I have like a proper burr grinder. And so I like the sound of it when it grounds
the beans and you have to just find the right setting, um, play around with the settings
until you find the right thing. And there's so many different ways to brew a cup also.
Like, you can have like a Keurig machine, you can have drip coffee, you can have like
French press. It's really interesting. Um, yeah, I'm also a coffee lover myself. Um,
and I'm glad I, I, I'm very glad that decaf exists because I wouldn't want to have to
give up coffee at all. And, um, yeah, we have some companies in South Africa that, um, do
the fair trade thing. Um, so therefore, you know, that, uh, everybody in the chain of
getting the coffee to you is being paid fairly. And I definitely do opt to, to, to support
them over, uh, just buying some big brand at the grocery store. Absolutely. Yeah, absolutely.
Yeah. We, we used to grind our own, um, back when we could both drink coffee with caffeine
in it. Um, and I've, I've, I've used French presses. Uh, I enjoy that. Um, I've got a
little, uh, well, I call it the one cup drip coffee maker. Uh, it's, it's actually a little
cone shaped thing that fits on top of a cup of coffee and you put the coffee in and pour
boiling water through. So I've, I've tried all of them. I still like real perked coffee
the best. I mean, in an old fashioned percolator and I don't have one anymore. The last one
that I had just stopped working. It was electric and I haven't tried to find another one, but
that, but it, uh, I will, I will, uh, say this and, um, as, as kind of a winding down
the, uh, URL of my main website is slow lane cafe. And that's the, that's, I have my email
address there. I've owned that domain since sometime in the early to mid nineties. I mean,
I registered it when that first, when you could first start registering domains. And
I chose that because I, I, I, I want to live life, not in the fast lane. I'd like to live
in the slow lane. And when we travel, we often will take side roads and, you know, just try
to find, and I think of living life in the slow lane and stopping at little roadside
cafes to have a cup of coffee. I mean, that's just kind of the whole, um, the whole reason
that I came up with that as a domain name. And, uh, and I, I probably will have that
until, uh, I am no longer here. And then it will live on. But that, that, that's how that
came. Yeah. I said, then, then it will live on even when you're not around anymore for
other people to be inspired. I hope so. Yeah, no, I'm sure. Well, thanks so much, Andy.
This was, this is a lovely conversation. I really enjoyed it. I knew it was going to
be a good one. That's why I pushed you to do it. And, um, so I'm truly grateful. Thank
you so much for everything you do on the Mycelium network. Um, it's great to have you as part
of our community. Um, we really appreciate you and thank you for taking the time to speak
with me. Um, I really appreciate it. Oh, you, you're most welcome. And, uh, I, I am happy
to be part of the community. It's been very rewarding for me. So I'm, I'm, I've been enjoying
it. Look forward to being able to participate, um, even more in the future. Great. Thanks
so much. Have a lovely rest of your day. You too now. Thank you for listening to this episode
of the Mycelium Network Podcast. If you're not already, please subscribe, star, and leave
a review for us in your podcatcher of choice. This helps others find us and helps us make
a better podcast for you on this course. You can also find and follow us on Twitter at
networkmycelium and join the community on Discord. All the links are available in the
show notes.
