Welcome to the Mycelium Network Podcast, a podcast all about early stage web developers
and the mentors and teachers that help them along the way.
Hey, Juan, welcome to the Mycelium Network Podcast.
Hey, thank you for having me, I'm really excited to be here today.
Yeah.
Yeah, I'm looking forward to this conversation.
So on another podcast I run called the Mechanical Ink Podcast, I had a really good conversation
with Abby and Nathalie from GitHub about all things open source and all the cool stuff
that GitHub's doing around that space.
And the education thing came up during our conversation there and they were like, you
should speak to Juan because he runs all this stuff and he's really enthusiastic about this
space.
I was like, that would be great and it would be a perfect fit for the Mycelium Network
Podcast because of what I do as part of this community.
And hey, it happened and here we are.
So I kind of let the cat out of the bag that you are from GitHub.
But without saying anything further, I'm going to give the floor to you and let you introduce
yourself to everybody.
Yeah, we're spoiling the news for our listeners.
So my name is Juan Pablo Flores, I am a Senior Program Manager here at the GitHub Education
Team, where my job is to help students across the world to, you know, get opportunities
on open source, help them to build awesome communities in their campus through the GitHub
Campus Experts Program.
And I also kind of like, we do a little bit of everything, but as a whole, my job, my
main role at GitHub is to support our students on the GitHub Campus Experts Program, which
is our developer program where we teach students how to build or grow welcoming communities
on their campus so that they can help others get prepared before they graduate.
Yeah, that's awesome.
It's definitely something I'm going to dig in a little bit more.
On your Twitter, a website that's a little...
Oh no.
...hinted at the moment.
I saw you shared a photo of your first two tattoos.
I'm always curious about, like, I don't have any myself, but I always know that when people
do get these, it's usually, there's usually a story behind it.
So I don't know if you are open to sharing what's behind the story behind your first
two.
Yeah, no, it's a whole story because of course, I think the first tattoo is the one you think
about the most.
I'm already thinking about doing like two or three more in the future, right?
But the first one is...
So I'm a very big fan of cybernetics and anime and everything that has to do around that.
And I saw these two very cool storyboards from Ghost in the Shell, the animated version.
And when I saw them the first time, I was like, these drawings are just like absolutely
amazing.
They have really cool details about the head of the shell, let's call it, because that's
how it's called the shell, right?
Which is kind of like this robotic head with a lot of different tubes coming out of it.
And then the next scene or the next storyboard is a brain and the brain has different details
of parts of the brain and some statistics of the brain that look very cool and very
futuristic.
And I saw it like, I think a year and a half ago and I was like, I would love to have like
the two of these two storyboards because also like something cool about storyboards is that
it's kind of like this space where they're planning the scenes and they're planning the
movie and what you're going to watch.
So it has a little bit of that behind the scenes of a movie that I really like.
So the two storyboards that I got tattooed, one of them is, it's one of the opening scenes
is when they're kind of like turning their robots on and it's in a part of the movie
very specific where they say like, so this is the shell and it's like the head of the
robot and then they talk about the ghost inside the shell, which is the brain that you can
see and both are very well put together.
It was so hard to find a tattoo artist that was able to draw them because it's like a
lot of really small lines.
So you also need to be very careful in how you maintain it because if you get a ton of
sun or you try to tan, these lines will diffuse into like each other.
So you need to be very careful with that, but fun story.
I got to know the MosFest team and we are building a space called Humans Behind the
Machine, which turns out to be very related to Ghost in a Shell.
So definitely I think there was some inspiration there from attending and just like supporting
MosFest.
Yeah, that's a great story.
I've watched that movie a couple of times and it's intense.
For me personally, I feel like I have to do it in little bits because it's one of those
things like Lord of the Rings and The Hobbit and those things, every time you read it,
every time you watch it, you pick up new details about it and you kind of start connecting
to the true story behind all of it.
So I really enjoy that, it's something I want to watch again in this new year.
I kind of tend to watch it once a year.
I saw it was really, really cool, but it is very detailed, the tattoo, that's for sure.
It's amazing artwork and amazing artist who did that.
So yeah.
Yeah.
It's like my precious now.
I need to take care of it until it's hard to be destroyed.
Because now I'm in Seattle, right?
Because we don't get a lot of sunlight.
But if I just reach anywhere, I'm just putting a ton of stuff to avoid it getting burned
by the sun.
That's interesting.
I never knew that about tattoos.
Interesting.
Yeah.
So as you said, you are program manager for the GitHub education.
And I don't know if all of these topics that I'm going to mention falls under the umbrella.
But some of the things that I know about that, to me, in my mind, fits under this umbrella
is, like you said, the campus experts.
That's the one thing that I'm aware of.
And then other things like GitHub skills, which is something relatively new, where you
can kind of create a course material using a combination of a repo and GitHub actions.
And you kind of tie it all together to teach somebody some kind of skill and base that
around some kind of cool automation using actions.
And then there is GitHub classrooms.
Something that I've looked at a couple of times.
But I think I can't quite connect what exactly it all offers.
So my question to you is, can you unpack some of these different things?
What does fall under the umbrella that you care what is outside of it?
And just what does all of these things offer both students, but then also educators?
Yeah.
No, there's a big, there's like different audience when we talk about education, right?
Like we have the students, which are the ones that I work with the most.
We have teachers who is kind of like, I would say the best or the most important influencers
in the world, because they basically teach the technologies that the sports will be starting
to use after they graduate, right?
And what I wanted to make sure, our team does manage the managed GitHub classroom.
So GitHub classroom, look at it as a way that a teacher can improve the way that they manage
their classroom.
So probably when you were a student, or in my case, I remember when I was a student,
when I had to like work with code and do like projects, I would need to take a USB and probably
put my code on a USB and do my stuff and then kind of like working with my team was like
absolutely awful because no one knew GitHub at that time.
I mean, I don't want to say that I'm old though, but it was not one of those things that you
would learn in college to know how to work together, which I think is one of the most
fundamental things that any developer needs to learn is how do we work together with code?
It's very likely that as a developer, you will work in a team, if not with other people
in the internet or in an office.
So learning how to work together is one of those skills that I'm surprised it is not
still kind of part of the curriculum, but that has a fundamental part on any student's
role or future, especially because it's not only about doing code, but it's also about
like communicating and it's also about like how do you avoid or divide work?
So it's much more complex than just like doing a git commit, git push and git pull, right?
So with GitHub Classroom, we try to lower the barrier of entry for both students and
teachers so that a teacher, for example, if you're creating curricula, you can distribute
that curricula through GitHub.
So instead of sharing a link with a link with everyone and then students having to like
work and then it becomes a little bit messy, everyone gets, everyone can click a link and
they form like teams and they have like everything set up to start working on a GitHub repository.
Now this helps the teacher because the teacher can see each of the individual repositories
that students are working on and it also helps the student because they would have everything
that they need.
Like GitHub, while GitHub in specific and GitHub repositories, I like to think about
it as not only as code, but as content as well.
So especially when we talk about learning, GitHub repositories offer great pieces of
content that people is not only pushing code, but they're also pushing documentation and
they're pushing like all of these automations for folks to kind of like learn online and
the same thing happens with GitHub Classroom.
So GitHub Classroom not only offers teachers these control of like, hey, what's kind of
like the current status of the project they can review, even like if you are one of those
teachers that really wants to get into it, you can see, you know, who developed which
part of the code base because you have Git involved.
So you can even see if they really work together or if it was like someone that did everything.
But also for teachers, there's this tool that I forgot the specific name, but they can set
up a few GitHub actions and automations to review their submissions automatically so
that once they have like, well, once all the tests pass, the student is able to merge it
and they get like the scoring for the work that they did.
So in essence, and then teachers can connect these to any of the tools or platforms that
they're using to match their classroom or, you know, these massive tools where you have
like the rooster of students and you match like the grades and everything.
There's also some automations there so that teachers have to do less of the work of managing
the technical side and they can focus more on teaching the classes that they have to.
On the other side, GitHub skills, it's not based on the education team, but definitely
I think is one of the coolest tools that we have because it's kind of like, in some sort
of ways, it's kind of a companion for you to learn.
In this case, or for the most part, how to use them, how to use Git and GitHub.
And it's not only kind of like, here's like these massive like documentation about how
to use Git and GitHub, but as you start doing very small steps, it starts to unlock the
next step and more knowledge.
So that, you know, one of the problems that we've learned is that pitching Git and GitHub
is complex.
Like it's not easy, especially when you are getting started in your career.
People throw at you like not only how to use like Git commands, but how to use a command
line and how to use a terminal and then it's how to use a new platform and everyone tries
to merge everything in a very short amount of time.
And with GitHub skills, you take a little bit of like more of like baby steps and help
folks start to build that learning without overwhelming them with all the knowledge that
they might need to use the platform at its fullest.
And this is something I don't remember the name, but it's the reverse pyramid, the reverse
concept pyramid, something like that.
So it's just a lot of video games where they're teaching you how to use the game.
They don't make you like fight a massive boss or anything, but first it's like this is how
you walk and this is how to jump and this is how you hit the monster.
And then they put you like a boss, right, but unless you're playing like Elden Ring
or something where you suffer playing, right.
The whole idea is to teach you step by step how to do the thing and then with GitHub skills
kind of like evolving and showing you more steps that you can do and more stuff, the
students avoid, well, the students and professional developers have a clear path on how they can
master GitHub.
Yeah.
Yeah.
Well, it's great.
I've used GitHub skills to just as an experiment to just basically see how I would set up a
basic like this is how you would do a pull request and like have a little GitHub skill
that takes you through the steps of forking and then once you fork, you do this and that
and that and then pull request and then it's merged and yeah, you pass to the GitHub skill.
It's really, really useful.
It takes a little bit of getting used to at the beginning, just getting an on-ramp and
understanding how the actions fit together and how the end of the action triggers the
next step and all that kind of stuff.
But once you've done it once, like doing the second one is much easier and the third one
is even easier.
So it's one of those things where it's like your knowledge builds on top of each other
and eventually, you'll just end up creating a whole bunch of little courses and it's great
for a bunch of stuff because you can have automated tests.
So if you did the JavaScript, for example, correctly, the test should all pass.
If they don't, then while you've done something wrong, so you have to go have a look and you
can try and be as clever as possible to try and detect certain common mistakes so that
you can highlight it via comment on the pull request, like this is probably what you've
done wrong because this specific test has failed.
So yeah, I think there's a lot of potential there, but there is like a little bit of a
learning curve, but I think it's fair.
Because the value you get out of it, like the learning, the time you have to take to
learn it is worth that time, I think.
But you brought up something interesting that I was going to ask later, but I might as well
bring it up now.
So I was going to ask you if you have any advice for aspiring developers and young and
old just starting out in their career, but then I wanted to bring in that part where
like exactly like you said, being a maker, a coder, a developer, technical writer, whatever
it is that you're doing in tech, writing code or writing the documentation is only one part
of the job.
A big part of the job is like working with others.
And if you don't understand how to do that well, it can often turn a really great job
into a drag because you're just struggling to work with people.
So I don't know, seeing that you also agree that that is something that's missing from
curricula and stuff like that, what advice do you have for people starting their career?
Like what is the important things to think about?
Yeah, no, especially with the last part, I have to say that I'm going to take my very
personal space.
I remember going to college and there was like this communication class that you need
to take, right?
And everyone saw that class as just like, oh, just like a class they put to fill up
like the curricula, right?
Or something that is not important because people, you know, as a developer, you only
care about the technical side, right?
Like you only want to code and be the perfect developer.
And unfortunately, that sense, I don't know if it happens in other countries.
I know it happens a lot in Mexico, especially in the university that I went to.
But I agree that, you know, one of the biggest challenges that I found, and this is from
my experience working with students from across the world, is that every culture has its
very, you can see culture in the communication style of a person.
And what I mean by that is there are some cultures that are very open to work in public
and share if they are finding a bar or if they are struggling with something.
There are some other cultures that prefer to do that privately because they don't want
to expose themselves or they don't want to get the attention from other people.
There are folks that like very direct communication.
So they won't tell you like a very long, hello, how are you doing?
I hope everything is doing great.
There's like some other cultures that do that because they really value like building a
connection as well.
So communication, I would say, is by far one of the hardest things for any developer, especially
if you work in open source.
Communication is essential so that you don't build on top of someone's full request by
mistake so that you don't take an issue that probably someone else already has taken or
someone or, you know, just like there's so many parts that require communication in our
everyday lives that I think it needs a little bit more.
It should be taken a little bit more seriously, especially in a world where working with folks
from the other side of the world, which is like you and I, we're talking during South
Africa.
I mean Seattle is almost like across the world.
So cultures change a lot and understanding that there are different communication styles,
I would say helps a lot of folks to get more confident of being able to propose things,
but also to understand the behaviors that they see other people are doing.
So definitely communication and understanding different cultures I'd say is one of the most
important skills that you can develop.
And I understand that for some folks, like working in a national or local company is
more than enough and that's okay, but you never know.
Like I would even like within a country, culture is so different.
So I think it's still very important that, you know, we dedicate some time to think or
learn how different communication styles work and that will effectively help us to have
a better work spaces and healthier communication channels with both like the work that we do
professionally, the work that we do personally, and in general like with the communities as
well that we help.
I completely forgot what was the other question though.
I got too much into this.
No, no, no, no, that's perfect.
Yeah.
No, it was just like any, I think you've covered all the bases there.
I think it's good.
I agree with what you've said there with that in mind and talking about communication.
So as an educator, of course, that is key.
Like if you can't communicate well, you're going to have a tough time teaching people
because not only do you have to transfer knowledge, but you have to do it in a way where you can
keep their attention and get their interest, make them excited about the stuff that you're
learning because that's the only way that we retain knowledge is if we're actually enjoying
what we're doing.
So you have to think about how you communicate.
So along those lines, there's so many ways to teach these days.
Like we touched on GitHub classroom, for example, we touched on the automated side of it where
it's you're kind of playing a game with, against or not against, with a machine learning thing
like GitHub skills.
You know, it's like you're there, the human doing your thing, and there's a machine telling
you whether you succeeded or failed and stuff like that.
And then there is another thing that's, I've kind of tried it and then stopped and now
I'm kind of considering going back to it because of a talk I heard at Universe, GitHub Universe.
And interestingly enough, when I was reading up about some of the stuff that you've been
doing that you've done in your past, you were actually involved with a research paper around
this idea of streaming on places like Twitch.
And specifically around audience and streamer participation at the scale of Twitch.
So thinking about that, and I've heard so many people say that, you know, Twitch can
actually be a great place to teach.
What do you think about that?
And what advice and thoughts do you have around this whole idea of using a platform that most
people won't even associate with this idea?
But do you agree that this can be a successful platform?
And if so, do you have any like kind of advice for people that are thinking about doing this?
Yeah.
So Twitch, that research, it was such a great time because it was like before the pandemic.
And I got this awesome opportunity to work with a lab in West Virginia University and
Carnegie Mellon to, they were doing something called audience participation games, which
is basically, you know, when you have an audience like on Twitch, how can you involve your audience
to be part of something that they're watching, like you're consuming content, but at the
same time, you are building that content as well with the host.
And this whole research came out of the Twitch Plays Pokemon stream, which happened like
a few years ago, people had kind of like the control of the character on Pokemon.
I don't remember which version, but basically, like anyone on the audience was able to send
a message in chat and depending on the command that they sent, the character on the video
game would do something.
And it was a bomb of an event to have Twitch Plays Pokemon, like a huge community of developers
came together.
They normally would lose all of their items, so they would like release all the Pokemons
and lose all the Master Balls and all the Pokeballs that they had.
So it was hilarious to see it, but it was really interesting because you can analyze
a lot of like human behavior with these games and, you know, I think there was like this
item that you were not able to throw away in the game.
And the audience took that as kind of like the relic, like the most important item, and
they had like stories about the shell, it was a shell, about the shell and how the shell
represents the game and represents what they were there for.
And it was absolutely incredible how a community was built around that.
I think for Twitch, Twitch has, it's very interesting because I really like Twitch as
a medium of learning.
I think one of the challenges that Twitch has to become a learning platform is that
it's very, very immediate, which means if you lose a show, you lose the content.
So probably you won't be able to watch a replay around Twitch.
And that's what makes other platforms become so successful is that you can, probably if
you miss it, that's okay, but then you can watch the replay or you can watch the recording
afterwards and with Twitch that happens.
But unfortunately, like a lot of those pieces of content gets lost because Twitch has like
these 30 days bot time-lapse.
Some accounts will have that like unlimited though, but the typical thing is like five
to 30 days.
So what we've learned through this research, my job was a lot more on how audiences work
as you grow your channel.
So we define like five different clusters of channels on Twitch, depending on how big
they were and which work and like the relationships that we see.
And it's very interesting because when you're a small channel, you can really create personal
connections between the audience and the host.
But then you have like these stadium, we call them stadium size channels where you have
like 35,000 people watching, which is incredible to think about.
But it becomes like a stadium where it stops being like Juan and I don't know, Fer or whoever
it is.
And it's just like, hey, Chad, how's it going?
So it's like, oh, that's interesting.
When do you become Chad and when are you like someone, right?
So at the end, our thing was much more about how the audience and hosts relate and communicate
during this kind of growth, depending on where your channel was sitting on.
In terms of education, there's some really cool things that I've seen around.
I've seen that folks are, first of all, they feel less pressured to join a live stream,
especially if you have guests.
So if you're a streamer and you're like, hey, do you want to jump in and chat?
People are more likely to jump in and chat than if you tell them like, hey, I'm making
this YouTube video about XYZ, do you want to jump in?
They're like, oh, but I need to prepare because this is going to be recorded and this is going
to be...
So definitely there's a little bit more planning sometimes on YouTube.
And for learning, I think Twitch still has a long way to go.
I think it is a great platform for building great connections and building a community
and bringing everyone together.
A lot of folks are using these learning public type of streams where you probably are learning
some new thing and you stream yourself doing so.
It's really cool because then chat kind of helps you out as well if you're making a mistake,
they will point that out in Twitch chat.
But also it's a little bit, since it's not as formal as probably like the traditional
education system, some folks feel more enticed to participate.
So if something funny happens, people take that opportunity to kind of like jump into
chat and engage.
So I think it allows people to engage a little bit more and really build a community around
learning these type of things.
Now what I see a lot of the streamers are doing is that they do the live stream and
then they take the recording, edit, and then publish that on other platforms so that they
can have this content evergreen.
And I think that's like the best move that you can do because then you feed from the
other platform's audience back to Twitch and then you feed your Twitch audience back to
these other platforms.
So it's kind of like a very good cycle that I've seen has working really good, especially
if you're interested in creating content.
Doing that will really help you to grow your channel really fast.
Yeah, that's good advice.
Yeah, it's interesting.
I'm definitely trying it again.
But I think what you've said here is interesting is maybe I think maybe it's just you have
to rethink based on the platform, what you do, how you do things.
I like this idea where people think like because Twitch is a little ephemeral in a sense, it's
more forgiving.
And so people aren't so concerned about making a blunder on a live stream because they're
like, ah, it's going to go away in a couple of days.
It's fine.
Whereas if it's something that's going to stay around forever, they might be like, I
have to, like you said, be really well prepared for this so that I don't get called out because
I said something that wasn't quite accurate or whatever the case may be.
But then maybe it's a natural evolution of the education system.
I think everybody acknowledges that it's not what it should be.
It's not what it can be.
And maybe this is one of those experiments that a lot of people are trying to see if
maybe this is an evolution of education and this is what the folks of nowadays gravitate
toward.
This is how they'd like to learn by kind of observing and then joining in when they feel
comfortable.
As part of like a lot of the stuff that I do, especially with the MyCNM network, that's
how I try and entice people to get involved is by not forcing them into the public or
saying you have to do this thing, but kind of allowing them to participate on the sidelines
for as long as they need and then starting to slowly maybe speak up about something and
see that, oh, okay, wait, that wasn't that bad.
And then they'll try it again and they'll maybe try it again.
So I think another aspect... Go for it.
Oh, sorry.
I think there's a couple of really cool things that I've noticed.
The first one is, for example, if you see Harvard CS50, it's one of these massive online
courses on getting started with computer science.
It has both components.
It has a pre-recording component and then a live component to it as well.
That worked really good.
And it's opening Harvard classes to everyone in the world and you can watch them whenever
fits your time best.
You don't need to be there 9 a.m. and probably tired of everything that happened the day
before or probably you didn't have a good sleep, you still need to be there.
And that flexibility is welcomed by a lot of folks.
So the first thing is, yes, there's a lot of new content and especially after the last
couple of years, the amount of content that was produced is incredible.
So anyone, you can learn a ton of stuff.
I think the hardest thing now is navigating the content and finding the content that fits
your style the most or that is quality content.
The other side is that there was a lot of experimentation being done during these last
two years and one of the things that I really liked of one of our student events, they organized
a series of workshops on Minecraft.
So they brought their entire community to Minecraft and everyone has their characters
and it's fun because you're playing a video game but they're also learning and teaching
and stuff and people really like that.
And I'm the least creative person in the world but I think the fact that people have the
opportunity to experiment with new mediums and new places and new spaces really helped
out to find out different ways to do the things that we have always done the same way.
Like you're now, if you want to become a software developer, software engineer, computer scientist,
you're not now entirely locked into a classroom but there's so many different ways in which
you can build your career and for example, open source is a great way to gather professional
experience without the hustle of internships and finding a job.
You can start learning some really good professional skills just by jumping into a repository
and asking how can I help to make this repository better, right?
And a lot of that is what we talk, it's not only the communication but also the technical
side that you can learn through open source.
Yeah, and to that point, so Stormy Peters who's also at GitHub now mentioned during
a talk she gave at Universe that by 2030 it's estimated that we'll need around 1.6 million
new developers joining the tech industry.
That's a lot of new developers in what, it's seven years remaining.
So I mean, GitHub is doing a lot of this stuff.
So I'm going to jump between a couple of things here.
So I think the first question I want to ask around that topic is what do you see as the
role of community such as the MyCDM network in helping us get to that 1.6 million?
But also something that I'm very interested in is twofold.
One is using open source as the vehicle.
And two, making diversity, equity and inclusion a natural part of these communities.
It's not this thing that you like tack on at the end to try and like, oh yeah, we have
to be diverse.
It's kind of just naturally, it naturally just happens because of the way you communicate,
maybe the platforms you choose.
I'd just love to hear your thoughts on the whole big topic.
Yeah, no, these are three big topics.
I think, so for us, communities are fundamental at GitHub, especially with GitHub education.
We do a lot of efforts with, for example, campus experts.
It's not only, it's kind of like a very different type of program where you would normally see
these master programs in the industry where it's like, oh yeah, teach X, Y, Z like technologies.
I think with campus experts, what we're trying to do is to be a little bit more in-depth
on the role of communities, especially with student communities.
And a big part of that for us is making sure, first is making sure that the student has
all the tools and resources that they need to be able to build a successful community.
And it's not only, I think one of the biggest mistakes that I've seen is that a lot of folks
open a community because it's the thing that other people are doing.
And instead of that, we wanted to make sure that the students are part of the program,
that they understand that a community is a tool that you can use to get X amount of people
or a certain population to a specific goal.
So instead of thinking of a community as the end goal of like, let's build that, I don't
know, a water community, because we want everyone to know about water, it's like, is a community
the right tool to make sure that that happens?
Or is it just, do you just need like a conference about like water and not a community?
And I think as developers, we try to use communities as the tool that solves every one of our problems.
We want to make sure that people think a little bit more about their communities.
So the first thing that we do is we teach students six different modules.
So they could have core skills to organize or have a community.
So we first take them through a community assessment.
So basically like, what's your community looking like, what are some of the struggles, what's
the mission of the community?
Then we make them go through diversity and inclusion, which is module number two.
And it's essentially thinking of what are some minorities in your city, in your location
that might be feeling left behind or left outside of these events?
And then once they analyze which are these communities, how can you make sure that they
feel welcomed in your community?
And how can you reach out to them or where can you find them so that you can do an intentional
effort to invite them and be part of the events that you're doing?
And I think these two are very core components of the program, because it's not only about,
let's do diversity and inclusion because it's what, as you mentioned, it's the last thing
that we will care about or it's what other people are doing, but rather it's like, who
are some people in my university that probably don't feel welcomed to join these events?
And that's very different in each country.
Every city has a different set of groups that might not fit that they belong in tech.
So it's not something that we as program managers can say, yeah, you need to focus
on this population because they are a minority, but rather we leave that to the student and
we guide them into really understanding who these populations might be so that they can
then start planning how they can reach out to them, invite them, and make sure that they
have a safe space for them to be, to attend or to be or to just join the event.
Then we teach them about how to do workshops, how to do talks, we teach them how to talk
about technical concepts in a much more easier way so that everyone can understand, and then
at the end they do a community proposal, which is basically the culmination of everything
that they have learned in the past five modules, and they make a proposal based on what they
see the community struggles are, where they want the community to be, what are some diversity
and inclusion barriers that they might find, and then they build this proposal of, okay,
if I want to solve issue number one, I need to make a workshop about technology XYZ, or
if I want more people, the most common thing that we see is that students want to bridge
the gap between industry and academia, so it's like, okay, why don't you bring some
people from the industry into your university to have conversations about things that they're
looking for, and some people are like, I want people to be together and get to know each
other because sometimes university can be a little bit isolating, so they organize get
togethers or a hackathon or some fun project, so again, it's not much about using a community
as the end goal, but rather as a tool to bring your community where you want it to be, and
then events serve the same thing, we see all the time of, I want to organize the biggest
hackathon in the world because we want to be the biggest one, and it's like, that's
fun though, but if you can have a thousand people and if they have a terrible experience,
they won't come back, why don't you focus on a smaller event where everyone has an absolutely
crazy, great amount of time so that they come back in the future or they have something
cool to take back with them after the event finishes, so it's a lot of making students
rethink about all of these things that they have heard and making sure that they have
this deep understanding on not only what they're doing, but also how can they take their communities
where they want them to be, and going back to the question because I deviated a ton,
the same thing happens with learning and communities, right, I know, there's, I think for every
city that I've visited, there's someone that wants to get more people into open source,
want to make sure that people have someone that they can reach out to, to learn or grow
their skills, and I think communities can play a really good role there to, you know,
like they understand the context, the local context, and they are going to be better like
teaching new technologies or helping folks to learn about tech and computer science better
than any company from the US will be able to, so communities are kind of like those folks
that, you know, and this is why, for example, the Mozilla developer network is so important,
like you publish the documentation and you publish these amazing like resources for folks,
but they don't work if nobody kind of like teaches them locally or they take them and
they make their own and then they modify it a little bit so that folks in their city are
able to understand it better, so you create this kind of like neutral documentation and
then people can, as kind of like content creators, right, like they take these things that they
see and they make their own, they modify it, they put, and if you're in Mexico, you put
a little bit of salsa to it and then you share that to your community, right, and that's
kind of like the whole goal of communities, like these people understand the struggles
and their community is better than we do and they can create content that is more fitting
to the local context than what we would ever going to do, because if you go or I go to
these communities, I'm probably going to teach the neutral documentation and they'll be
like, okay, that was fun, but like I didn't get it, and it's better if someone that really,
you know, like is building that community and that sense of belonging and that trust
with the community as well, is they have better tools to give these new content to their communities
better than we could ever do.
Now in terms of, I don't know if that makes sense to you, I think.
Yeah, yeah, totally, no, yeah, that's great, yeah.
So I think language plays a big role there, right?
I think you kind of touched on something, I think language plays a big role, like when
you talk about local communities taking content and then making it their own.
I think that one of the big things is just the language, like if it's only available
in English, that in itself might be a barrier.
I think at the beginning, you mentioned that like, get and get up and teaching that is
get up less, but to some extent, but get more specifically is often not taught at the beginning.
And so we've actually seen that in a group that you would think this is not a problem,
it is been the one big stumbling block.
Like for example, at the Write the Docs conference in Portland, just speaking with these technical
writers that that's their job is writing technical content.
When you ask them what is one of the biggest hurdles to contributing to an open source
project, say for example, MDN Web Docs, they would say get, honestly, I'm not sure how
to use get properly, I'm always scared I mess everything up.
I'm not 100% sure how the whole branching and pull request thing works, and that is
why I really don't.
There are of course other factors as well, that's cultural and sometimes it's us maybe
not yet creating as welcoming a space as we think we are.
It's also, but far and away, one of the biggest things is just this core thing.
And I think if you're in that community, you will understand that much better than somebody
looking from the outside.
Because as a coder or something, you might think like, get is just, it's not easy by
no means, but the basic commands you need to be productive aren't that hard.
But that is for you, who uses this every day.
For somebody who that is not core to doing their job, it's a different story.
And I think that plays into the spoken language as well.
Yes.
Language and I think, well, we can nerd about documentation and stuff for ages, but there's
one thing that I met Rachel Lee neighbors, she is absolutely amazing.
We were talking about this because we were going through the same struggle of like, we
want to make sure our documentation is accessible to everyone, but it's so hard because of like
maintaining one piece of documentation in English is hard and then you try to translate
everything into multiple languages, it becomes absolutely unmanageable.
So especially if you have a small team, right?
If you have like a thousand person team, like congratulations and it's great to hear there's
a lot of such teams, but what she mentioned, and I think this makes a ton of sense is that
one of the best tips that she can do, first of all, yes, communities play a good, a massive
role there.
But the second thing is making sure that your documentation is easily translatable by machine,
which means a lot of folks would click the Google Chrome or Firefox auto-translate tool
to get the conditions on their own language.
So making sure that that translation is a quality translation and making your documentation
easily translatable by a machine plays a better role than redoing your whole documentation
in a different language.
So I mean, this is going to be a little bit of not me thinking of me product maintaining,
like thinking of product and documentation as a product is like maintaining languages
is so hard, so expensive, and it really requires a lot of resources.
If you don't have the team to be able to do so, what you can do is to make sure that it
is translatable by a machine and that it makes sense after the machine translates it.
Do you think that is simply avoiding stuff like jargon, avoiding not spelling out acronyms
before you actually start using them?
Do you think those are the kinds of things that you would do?
Yeah.
No, Charlie, I think there's, I mean, I'm not an expert in documentation, unfortunately.
I would love to, but there's very small, and I think this has been best practices on documentation
writing for a long time that really helped out the algorithm to make the translation
the best.
Yeah.
Yeah.
Yeah, I know.
I would love to get somebody on here to talk about just, I spoke with Chris Mills, who's
been doing technical writing for a very long time, but it'd be interesting to talk to like
maybe two or three technical writers on one of these episodes and just, because I think
it's so critical to have good documentation, especially for open source projects.
I think some of the most successful open source projects are successful because their documentation
is so good.
I know one of the reasons Vue.js got such a big fan base in China as opposed to React,
which the rest of the world seems to have chosen as their framework of choice, is because
the documentation for Vue is available in Chinese from the get-go because Evan Yeo is
from China originally, and so it was important for him to ensure that that documentation
is available in Chinese because he knows how important that is to people in China.
So it's interesting, and I mean for myself as a developer and a maker, if I want to use
your tool or your framework or your whatever, if your documentation is terrible, then that
is definitely the first place where I'm going to probably see if there's another option
available.
That has good documentation.
So I think it's something that's critical to understand well and then to understand
how to write this, like you said, so it is machine translatable in an efficient manner,
so it doesn't translate in a way that it no longer makes sense.
Like you read it in Spanish and you're like, I'm not exactly sure that's what they were
trying to say here, and you kind of have to switch back to the English version.
That's really good.
That's interesting.
I haven't thought about it from that way.
That's really interesting.
And also, as an open source maintainer, making sure that your documentation is clean and
understandable helps you onboard more folks into using your tools.
So it also ends up benefiting you in terms of how many people are using the tools.
If that's the goal of you, you're creating the project, right?
So I think for a lot of the research that we've done with open source projects, thinking
why is it sometimes hard for some folks to use open source every day is because onboarding
to using these tools sometimes is a little bit hard for some folks that either they're
changing their careers or they're just getting started and they hear about XYZ technology,
but they don't understand the onboarding.
Unfortunately, people leave really fast.
And talking about open source and open source for learning, I think some of the research
that we've done in the past is for us, I think internships are awesome, but unfortunately
not everyone has access to an internship close to them.
Internships are still very geo-located to the US, Canada, and Europe.
There's some in India that are starting, which I think is amazing.
But unfortunately, outside of these programs, it's really hard to get into an internship.
Either you will need to apply to the company and then see if they will offer you a visa
to be able to work during the internship, which that opens a whole different kind of
worms, or you would need to find other ways in which you can gain experience.
At the end, that's the whole goal, right?
We want to make sure that folks get this experience of being out there and learning how things
are done outside of the academia before they graduate, because it's really valuable for
them and for the industry.
At the end, something that we've learned is just by supporting student developers, we
help the whole industry.
We make sure that folks, before they graduate, they come with more experience and with better
tools and better classes, the whole industry levels up as well.
It's in the long term, it's not going to be immediate, but definitely it's worth making
the investment to help the next generation to have everything that they need to be awesome.
On the other side, I think open source is very democratic on the way that it works.
As a student, you're able to go to any open source repository and see what are some of
the issues that are open and explore the technology.
What I really like about open source is that no one asks you for your resume to make a
contribution.
It would suck if you would have to be like, oh yeah, here's my experience on these type
of projects.
These are some contributions that I've made, and this is why my pull request should be
the one that you accept.
That would break open source at its core.
Yeah, yeah, well said, well said.
Open source offers a very democratic entrance for everyone to make these contributions and
start gaining more experience with how code is built.
I love the fact that it doesn't matter where you're coming from.
We are trying to find ways in which we can help folks to contribute to these open source
projects.
A lot of that as well is some of the challenges is navigating open source, which is how can
I find an issue that I can contribute to, which has been a challenge from eternity.
Not only that, but also how do I make sure... A lot of folks, especially students that
are making their first open source contribution, there's a lot of imposter syndrome involved.
You have the code that probably the maintainer or the contributors are looking for, but the
students really doubt themselves if this is some valuable piece of code.
Another big problem that we've seen is imposter syndrome in the industry, which I think is
kind of like a pandemic.
Everyone has imposter syndrome at some point in their career, but once again, when we talk
about cultures, exposing your work to the world and having an open source maintainer
of a project that probably you're a big fan of review your code, that's challenging if
it's the first time that you're making this contribution.
There's a few challenges, but from what I've seen, more companies are putting attention
into the activities that folks have on GitHub.
So if you're making contributions to open source, that is something that will boost
your resume once you're applying to formal jobs or traditional jobs.
So a lot of folks in a lot of your careers are starting to use GitHub more to verify
your experience.
They check out if you have any projects there.
Even that we've heard weird stories of even if your profile looks like professional-ish,
which that's a very weird thing to say, but I kind of understand what they're meaning.
It's like, oh yeah, you don't have a really good profile picture, but definitely the activity
that you're doing in GitHub can essentially help you out to make your resume or your profile
outstand from others as you apply for jobs afterwards.
I've heard a ton of stories of people getting jobs out of GitHub.
So people that become continuous contributors or recurring contributors to open source projects,
they get visibility from other developers.
I mean, if I can get someone that is contributing a lot to an open source project that I'm building
my technology from, I would totally send them a message of, hey, are you looking for a job?
I have full transparency of how you work, and I think this is extremely valuable.
So, I really hope, and it's not a hope, I think it's something that we're naturally
moving towards too, that first of all, open source offers a democratic way of getting
professional experience in, I would say, its fullest component.
Second of all, it can help you get a job, especially if you are getting started in tech
or if you change your careers, making open source contributions and being active in a
way that might bump your resume or your application to a job.
And third, it's a great way to meet really cool people that are doing really cool stuff.
And you never know, probably one of them can get you to your next job or your first job
as well.
Yeah, that's great.
100% agree.
Yeah, you've answered all my questions and then some.
So that's great.
I love that.
So I have basically two questions left.
And the one is, so we've talked a lot about students and all the opportunities there are
and all the things that getups offer.
But as you've worked with all these students and you've seen what works and what doesn't
work and some new trends, maybe that's emerging or anything, is there anything specific advice
you have for educators?
Like are there some things that you've seen that, you know, if you incorporate this into
how you teach, it really works well with students and these are things that's kind of like that
doesn't kind of gel with students?
Yeah, no, totally.
I think educators in particular are, we put a lot of responsibility on their hands.
Like they don't only have to create a lot of the curricula, they also need to, I would
say it's kind of like a performance art, right?
Like you need to engage people and keep them excited about what they're learning.
But also you need to teach them.
So it's like, it's not only kind of like watching a TV show on whatever platform, but it's also
how do you make sure that people really kind of like understand what I'm talking about
and they can take that into something useful afterwards.
And they also need to review and give comments and feedback to all the work that students
are doing.
My thing with teachers is that sometimes, especially for some schools that, well, I
think it's across multiple institutions, but teachers do a lot of work.
The best piece of advice that I would give is that they're not alone.
Like there's a ton of other teachers there that are looking forward to sharing what they
have done.
From the GitHub side, we have the GitHub campus advisors and we have a private GitHub discussion
with all the teachers.
And it has been really cool because they share some of their resources.
So for example, if a teacher has done an intro to algorithms and data structures course on
GitHub, they will share, sometimes they will share, depending on the college, because some
colleges really kind of like protect their property, but some of them are very cool and
they share their resources with other teachers.
So if you're giving the same class, you already have the content.
So you only need to worry about the performance part of your job.
On the other side, I think there's very small things that you can do to make sure that people
really engage with your classroom.
In our case, I know it sounds like it's not a lot, but with GitHub, you're able to, if
you reach out to GitHub, please do it for a teacher.
We would love to help you.
But we send like a swag back to teachers.
With Mona stickers and with Octocad stickers, Mona is our mascot for folks who probably
haven't heard that before.
We send them like cheat sheets and a lot of other resources that they can use while they're
teaching.
And it turns out that the impact of these small resources, like the cheat sheet is by
far one of the most used tool because you have like all the Git commands that probably
you will be using in one single piece of paper.
It's kind of like these very small things when we support students that do a ton of
impact on their experience managing classrooms.
So reach out to us.
We would love to help.
And I think the most important is that you're not alone.
There's a lot of other teachers that are in the same journey as you are.
If you're just getting started, I would recommend reaching out and talking with teachers that
have more experience learning from them.
And I think there's some really great resources there for teachers to take.
I think as a whole, you have a very important job.
You're preparing the next generation and we want to make sure that you have all the tools
that you need to do that the best way possible.
Stories from campus advisors, we've heard some really beautiful stories.
We have help.
I'm talking about Mexico a lot because I'm from Mexico, so I have a really good communication
with them.
But we sent a swag pack to a teacher in an indigenous school in Guerrero, which indigenous
schools unfortunately are very under-resourced in the country.
And for them, the fact that they got the stickers and the chichits was life-changing for the
students.
They were very excited about the classroom afterwards.
They were really engaged with the teacher and the teacher has a huge round of applause
to that teacher because he is teaching a technology that is in another language to folks that
speak in one of the multiple indigenous languages in the country.
And they're building some absolutely amazing things and they send us a photo every quarter
of a project that they build and you can always see the students with their GitHub stickers
and feeling very proud of that.
And I think that's like a super heartwarming story.
But yeah, it's like the small things count a lot, I think, with teachers and there's
been a lot of movement in the last two years of how we teach and this is like the right
time for us or what we've noticed as well is that this is the right time to reconnect
with the students, especially if you have the ability to have them there in person.
It's a great time to reconnect and really build these trust relations with students.
Being a teacher is much more than just like teaching.
You're like a psychologist, a therapist, you are everything, content creator.
So I don't know, I'm just like very astonished with everything that they do.
Yeah, that's beautiful.
Well this was awesome and there's so many good things shared here.
I only have one closing question for you and that is, what is the best piece of advice
that you've ever received?
I think the best piece of advice that I've received is, it's a great question.
I think, so I'm going to give some context because I was building, before I joined GitHub,
I was building like a hack fund in Mexico and it was so hard because it was when hack
funds were not like a thing.
So when we went to like sponsors, our companies to sponsor us, they were like, oh, but what's
a hack fund?
Are you going to hack the bank?
We laugh at that right now, right?
But at that time it was like, okay, I expect that they don't know what this is all about
and it was so hard.
It was so hard to raise funds to do the work that we wanted to do.
And a friend of mine told me that if it was easy, anybody would be able to make it.
And it's like, you know, when you're going through some hardship on your job or your
work or something, it's like, you know, if you're one of the few that has the ability
to do it, it's because like it's not easy, like it's going to be challenging sometimes
to do the work that we do.
And I think that for me was like, yeah, that makes sense.
Like it's, we're the first ones doing that, we're doing that at the time.
People have tried in the past, but didn't work out successfully and I was like, okay,
that do make sense.
So yeah, I think that's my best piece of advice.
Yeah, that's great advice.
And that's for sure.
You can see it everywhere.
Nobody wants to be the first because it's hard to be the first to do something.
Even if it's just a variation on what somebody else has already done, it's always hard to
be the first one.
You see it in these online conferences, like the chat is really quiet until the first person
posts the, hey, welcome everybody.
Suddenly it starts rolling.
So it's like that thing, like everybody finds it hard to be the first.
So if you're the first to do X in your community or in your country, then know it's going to
be hard, but it's probably going to be worth it at the same time.
So I think it's great advice and yeah, people should definitely take that to heart.
Thanks so much, Juan.
This was a wonderful conversation.
I'm so glad this happened and I'm so excited to share this with the community.
Have a wonderful rest of your day and speak to you soon.
Talk to you all soon.
Have a good one.
Thank you for listening to this episode of the My Senior Network Podcast.
If you're not already, please subscribe, star, and leave a review for us in your podcatcher
of choice.
This helps others find us and helps us make a better podcast for you on this course.
You can also find and follow us on Twitter at NetworkMySenior and join the community
on Discord.
All the links are available in the show notes.
